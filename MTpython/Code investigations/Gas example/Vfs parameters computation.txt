import sys
import os
sys.path.append("/Users/filiprolenec/Desktop/MT/MTpython/src")

from gas_example.optimization.adp_algorithm import adp_algorithm_complete
from gas_example.optimization.optimization import get_state_utility_pairs, get_best_action
from gas_example.optimization.sampling import get_state_sample
from gas_example.optimization.vf import Vf
from gas_example.enum_types import PowerplantState
from gas_example.simulation.state import State


import matplotlib.pyplot as plt
from scipy import optimize
import seaborn as sns
import numpy as np
import pandas as pd

from sklearn.linear_model import LinearRegression
sns.set()

time_epoch = 298
VF_SAMPLE_GLOBAL = 1000
VF_SAMPLE_IND = 100
next_vf = Vf()

sampled_states = get_state_sample()
state_reward_pairs_raw = get_state_utility_pairs(sampled_states, next_vf)

def get_sparks_and_utilities(state_reward_pairs, plant_state): 
    chosen_states  = [state for state in state_reward_pairs_raw.keys() if state.plant_state ==plant_state]
    utilities = [state_reward_pairs_raw[state] for state in state_reward_pairs_raw.keys() if state.plant_state ==plant_state]
    sparks = [state.get_spark_price() for state in chosen_states]
    
    return sparks, utilities

def plot_spark_utility_graph(plant_state): 
    sparks, utilities = get_sparks_and_utilities(state_reward_pairs_raw, plant_state)
    
    plt.scatter(sparks, utilities)
    plt.xlabel("Spark")
    plt.ylabel("Utility")
    plt.title(f"Spark vs Utility {plant_state}")
    plt.show()


for state in PowerplantState: 
    plot_spark_utility_graph(state)

plant_state =PowerplantState.STAGE_1

sparks, utilities = get_sparks_and_utilities(state_reward_pairs_raw, plant_state)

x = np.array(sparks).reshape(-1,1)
y = np.array(utilities)
model = LinearRegression().fit(x, y)
model.coef_

sparks_sample = np.linspace(-200,200,401)
a = model.predict(sparks_sample.reshape(-1,1))

plt.scatter(sparks, utilities)
plt.plot(sparks_sample, a)
plt.xlabel("Spark")
plt.ylabel("Utility")
plt.title(f"Spark vs Utility {plant_state}")
plt.show()

def piecewise_linear(x, x0, y0, k1, k2):
    return np.piecewise(x, [x < x0], [lambda x:k1*x + y0-k1*x0, lambda x:k2*x + y0-k2*x0])

p , e = optimize.curve_fit(piecewise_linear, sparks, utilities)
xd = np.linspace(min(sparks), max(sparks), 500)
plt.plot(sparks, utilities, "o")
plt.plot(xd, piecewise_linear(xd, *p))

vfs = adp_algorithm_complete()


vfs_models = {}
for i in range(len(vfs)):
    vfs_models[i] = vfs[i].models

df_vfs = pd.DataFrame(vfs_params)
identificator = pd.Timestamp.now().strftime("%Y-%m-%d_H%H")
df_vfs.to_pickle(f'saved_vfs/vfs_{identificator}.pkl')


