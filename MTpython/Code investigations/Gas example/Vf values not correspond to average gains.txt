import sys
import os

sys.path.append("/Users/filiprolenec/Desktop/MT/MTpython/src")

last_epochs = 300

from progressbar import progressbar

from gas_example.optimization.vf import create_vfs_time_list, update_vf_models
from gas_example.setup import TIME_EPOCHS
from gas_example.simulation.state import State
from gas_example.enum_types import PowerplantState


from gas_example.optimization.optimization import get_best_action
from gas_example.simulation.simulation import balance_to_pce
from gas_example.enum_types import Action
from gas_example.setup import BORROW_RATE_EPOCH, RISK_FREE_RATE_EPOCH

import numpy as np
import matplotlib.pyplot as plt

def adp_algorithm_complete():
    vfs = create_vfs_time_list()

    for time_epoch_left in progressbar(range(last_epochs)):
        time_epoch = TIME_EPOCHS - time_epoch_left-1
        # Last Vf value is zero, no money to be gained.
        if time_epoch != TIME_EPOCHS - 1:
            update_vf_models(vfs[time_epoch], vfs[time_epoch + 1])
    return vfs

vfs = adp_algorithm_complete()

from gas_example.optimization.optimization import get_best_action, get_utility_realization
from gas_example.optimization.basis_function import uf_2_inv
init_state=State(10, 25, 80, PowerplantState.NOT_BUILT, 0)


vfs_0 = vfs[TIME_EPOCHS - last_epochs]
vfs_1 = vfs[TIME_EPOCHS - last_epochs+1]
vfs_2 = vfs[TIME_EPOCHS-1]


expected_utility = vfs_0.compute_value(init_state)
expected_utility

result_1 = uf_2_inv(expected_utility)/1_000_000
result_1

def balance_to_pce(balance):
    if balance > 0:
        pce = balance / (RISK_FREE_RATE_EPOCH ** (last_epochs-1))
    else:
        pce = balance / (BORROW_RATE_EPOCH ** (last_epochs-1))

    return pce

final_pces = []
for i in range(200):
    print(i)
    state = init_state
    fcfs = []
    for epoch in range(last_epochs-1):
        action, exp_utility_this_action = get_best_action(state, vfs[TIME_EPOCHS-last_epochs+epoch+1])
        state, fcf = state.get_new_state_and_fcf(action)
        fcfs.append(fcf)
    final_pces.append(round(balance_to_pce(state.balance) / 1000000.0, 5))
    

plt.hist(final_pces)

result_2 = np.mean(final_pces)
result_2

result_2 - result_1

(result_2 - result_1)/result_2*100

state = init_state

state = init_state
fcfs = []
for epoch in range(last_epochs-1):
    action, exp_utility_this_action = get_best_action(state, vfs[TIME_EPOCHS-last_epochs+epoch+1])
    state, fcf = state.get_new_state_and_fcf(action)
    fcfs.append(fcf)
    print(f"Fcf: {fcf}")
    print(f"Balance {state.balance}")
    

uf_2_inv(vfs_0.compute_value(init_state))

get_best_action(init_state, vfs_1, print_details=True)

get_utility_realization(init_state, Action.IDLE_AND_BUILD, vfs_1, print_details=True)

state_1, fcf = init_state.get_new_state_and_fcf(Action.IDLE_AND_BUILD)

get_utility_realization(state_1, Action.RUN, vfs_2, print_details=True)



df_vfs = pd.DataFrame(vfs)
identificator = pd.Timestamp.now().strftime("%Y-%m-%d_H%H")
df_vfs.to_pickle(f'saved_vfs/vfs_{identificator}.pkl')

df_vfs_2 = pd.read_pickle(f'saved_vfs/vfs_{identificator}.pkl')
vfs_2 = list(df_vfs_2[0])
